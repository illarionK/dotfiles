snippet id "UUID" i
`!p import uuid
if not snip.c:
  snip.rv = str(uuid.uuid1())`
endsnippet

snippet tag "Tag with UUID in hex encoding" i
`!p import uuid
if not snip.c:
  snip.rv = uuid.uuid1().hex`
endsnippet

snippet flow
/* @flow ${1:strict-local }*/
endsnippet

snippet flowfix
// $FlowFixMe
endsnippet

snippet typedef
/*::
type ${1:Props} = {
  ${2}
};
*/
endsnippet

snippet type
/*: ${VISUAL}${1} */
endsnippet

snippet assign
Object.assign({}, ${1})
endsnippet

snippet component
class ${1:Comp} extends React.Component /*:: <Props, State> */ {
  /*::
  */

	constructor(props /*: Props */) {
		super(props)

		this.state = {}
	}

	render() {
		return ${3:null}
	}
}
endsnippet

snippet fsc
// Remember to import React as ES namespace
import * as React from 'react'
export const ${1:Comp} = (function $1(props) {
  return ${2:null}
} /*: React.StatelessFunctionalComponent<Props> */);
endsnippet

snippet exp
module.exports = {
	${1}
}
endsnippet

snippet frozen
Object.freeze({})
endsnippet

snippet h
h('${1:div}', {
	className: classNames('${2}')
}, [
	${VISUAL}${3}
])
endsnippet

snippet test
test('${1:Untitled Test}', async function(t) {
	t.truthy(true)${3}
})
endsnippet

snippet tape
test('${1:Untitled Test}', function(t) {
	// eslint-disable-next-line no-extra-semi
	;(async function() {
		t.ok(true)
		${2}
	})()
		.then(() => t.end())
		.catch((err) => t.end(err))
})
endsnippet
